
STM32F4_Drivers_Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a00  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ba8  08000ba8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ba8  08000ba8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000ba8  08000ba8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ba8  08000ba8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ba8  08000ba8  00010ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bac  08000bac  00010bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08000c14  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08000c14  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001acc  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000046b  00000000  00000000  00021b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d8  00000000  00000000  00021fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  000220a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001fce  00000000  00000000  00022148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000107a  00000000  00000000  00024116  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008d45  00000000  00000000  00025190  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ded5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003b8  00000000  00000000  0002df50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b90 	.word	0x08000b90

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08000b90 	.word	0x08000b90

080001e8 <main>:
#include "stm32f407xx.h"

uint8_t Btn_1_St = 0;

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	// *** Hardware peripheral initialization using Heap memory ***
	GPIO_Handle_t *GPIO_Cfg;
	GPIO_Cfg = malloc(sizeof(GPIO_Handle_t));
 80001ee:	200c      	movs	r0, #12
 80001f0:	f000 fc04 	bl	80009fc <malloc>
 80001f4:	4603      	mov	r3, r0
 80001f6:	603b      	str	r3, [r7, #0]

	//LED GPIO Def
	GPIO_PeriClockControl(GPIOF, ENABLE);
 80001f8:	2101      	movs	r1, #1
 80001fa:	4829      	ldr	r0, [pc, #164]	; (80002a0 <main+0xb8>)
 80001fc:	f000 fa5a 	bl	80006b4 <GPIO_PeriClockControl>
	GPIO_Cfg->pGPIOBaseAddr = GPIOF;
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	4a27      	ldr	r2, [pc, #156]	; (80002a0 <main+0xb8>)
 8000204:	601a      	str	r2, [r3, #0]
	GPIO_Cfg->GPIO_PinConfig.PinAltFunMode = 0;
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	2200      	movs	r2, #0
 800020a:	725a      	strb	r2, [r3, #9]
	GPIO_Cfg->GPIO_PinConfig.PinMode = GPIO_MODE_OUTPUT;
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	2201      	movs	r2, #1
 8000210:	715a      	strb	r2, [r3, #5]
	GPIO_Cfg->GPIO_PinConfig.PinNumber = GPIO_PINNUM_9;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	2209      	movs	r2, #9
 8000216:	711a      	strb	r2, [r3, #4]
	GPIO_Cfg->GPIO_PinConfig.PinOPType = GPIO_OP_TYPE_OD;
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	2201      	movs	r2, #1
 800021c:	721a      	strb	r2, [r3, #8]
	GPIO_Cfg->GPIO_PinConfig.PinPuPdControl = GPIO_PUPD_PU;
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	2201      	movs	r2, #1
 8000222:	71da      	strb	r2, [r3, #7]
	GPIO_Cfg->GPIO_PinConfig.PinSpeed = GPIO_SPEED_HI;
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	2203      	movs	r2, #3
 8000228:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIO_Cfg);
 800022a:	6838      	ldr	r0, [r7, #0]
 800022c:	f000 f8b0 	bl	8000390 <GPIO_Init>

	//Button GPIO Def
	GPIO_PeriClockControl(GPIOE, ENABLE);
 8000230:	2101      	movs	r1, #1
 8000232:	481c      	ldr	r0, [pc, #112]	; (80002a4 <main+0xbc>)
 8000234:	f000 fa3e 	bl	80006b4 <GPIO_PeriClockControl>
	GPIO_Cfg->pGPIOBaseAddr = GPIOE;
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	4a1a      	ldr	r2, [pc, #104]	; (80002a4 <main+0xbc>)
 800023c:	601a      	str	r2, [r3, #0]
	GPIO_Cfg->GPIO_PinConfig.PinAltFunMode = 0;
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	2200      	movs	r2, #0
 8000242:	725a      	strb	r2, [r3, #9]
	GPIO_Cfg->GPIO_PinConfig.PinMode = GPIO_MODE_IT_RT;
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	2205      	movs	r2, #5
 8000248:	715a      	strb	r2, [r3, #5]
	GPIO_Cfg->GPIO_PinConfig.PinNumber = GPIO_PINNUM_3;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	2203      	movs	r2, #3
 800024e:	711a      	strb	r2, [r3, #4]
	GPIO_Cfg->GPIO_PinConfig.PinOPType = 0x0;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	2200      	movs	r2, #0
 8000254:	721a      	strb	r2, [r3, #8]
	GPIO_Cfg->GPIO_PinConfig.PinPuPdControl = GPIO_PUPD_PU;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	2201      	movs	r2, #1
 800025a:	71da      	strb	r2, [r3, #7]
	GPIO_Cfg->GPIO_PinConfig.PinSpeed = GPIO_SPEED_HI;
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	2203      	movs	r2, #3
 8000260:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIO_Cfg);
 8000262:	6838      	ldr	r0, [r7, #0]
 8000264:	f000 f894 	bl	8000390 <GPIO_Init>

	GPIO_IRQConfig(IRQ_NO_EXTI3, 0x01, ENABLE); //Enable IRQ
 8000268:	2201      	movs	r2, #1
 800026a:	2101      	movs	r1, #1
 800026c:	2009      	movs	r0, #9
 800026e:	f000 fad9 	bl	8000824 <GPIO_IRQConfig>

	free(GPIO_Cfg);
 8000272:	6838      	ldr	r0, [r7, #0]
 8000274:	f000 fbca 	bl	8000a0c <free>
	// *** Main Application ***

	while(1)
	{
		//Btn_1_St = GPIO_ReadInputPin(GPIOE, GPIO_PINNUM_3);
		if(Btn_1_St == 0)
 8000278:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <main+0xc0>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1fb      	bne.n	8000278 <main+0x90>
		{
			GPIO_ToggleOutputPin(GPIOF,GPIO_PINNUM_9);
 8000280:	2109      	movs	r1, #9
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <main+0xb8>)
 8000284:	f000 fab8 	bl	80007f8 <GPIO_ToggleOutputPin>
			for(uint32_t i=0; i<500000;i++);
 8000288:	2300      	movs	r3, #0
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	e002      	b.n	8000294 <main+0xac>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	3301      	adds	r3, #1
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a05      	ldr	r2, [pc, #20]	; (80002ac <main+0xc4>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d9f8      	bls.n	800028e <main+0xa6>
		if(Btn_1_St == 0)
 800029c:	e7ec      	b.n	8000278 <main+0x90>
 800029e:	bf00      	nop
 80002a0:	40021400 	.word	0x40021400
 80002a4:	40021000 	.word	0x40021000
 80002a8:	20000080 	.word	0x20000080
 80002ac:	0007a11f 	.word	0x0007a11f

080002b0 <EXTI3_IRQHandler>:
	}
	return 0;
}

void EXTI3_IRQHandler(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(3); //Pend the interrupt
 80002b4:	2003      	movs	r0, #3
 80002b6:	f000 fb57 	bl	8000968 <GPIO_IRQHandling>
	Btn_1_St ^= 0x01; // Toggle the LED command bit
 80002ba:	4b04      	ldr	r3, [pc, #16]	; (80002cc <EXTI3_IRQHandler+0x1c>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	f083 0301 	eor.w	r3, r3, #1
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	4b01      	ldr	r3, [pc, #4]	; (80002cc <EXTI3_IRQHandler+0x1c>)
 80002c6:	701a      	strb	r2, [r3, #0]
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000080 	.word	0x20000080

080002d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002d8:	4a14      	ldr	r2, [pc, #80]	; (800032c <_sbrk+0x5c>)
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <_sbrk+0x60>)
 80002dc:	1ad3      	subs	r3, r2, r3
 80002de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <_sbrk+0x64>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d102      	bne.n	80002f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <_sbrk+0x64>)
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <_sbrk+0x68>)
 80002f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <_sbrk+0x64>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4413      	add	r3, r2
 80002fa:	693a      	ldr	r2, [r7, #16]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d207      	bcs.n	8000310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000300:	f000 fb52 	bl	80009a8 <__errno>
 8000304:	4602      	mov	r2, r0
 8000306:	230c      	movs	r3, #12
 8000308:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800030a:	f04f 33ff 	mov.w	r3, #4294967295
 800030e:	e009      	b.n	8000324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <_sbrk+0x64>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <_sbrk+0x64>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4413      	add	r3, r2
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <_sbrk+0x64>)
 8000320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000322:	68fb      	ldr	r3, [r7, #12]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3718      	adds	r7, #24
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20020000 	.word	0x20020000
 8000330:	00000400 	.word	0x00000400
 8000334:	20000084 	.word	0x20000084
 8000338:	20000098 	.word	0x20000098

0800033c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000340:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <LoopForever+0x6>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <LoopForever+0xe>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <LoopForever+0x16>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036a:	f000 fb23 	bl	80009b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036e:	f7ff ff3b 	bl	80001e8 <main>

08000372 <LoopForever>:

LoopForever:
    b LoopForever
 8000372:	e7fe      	b.n	8000372 <LoopForever>
  ldr   r0, =_estack
 8000374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000380:	08000bb0 	.word	0x08000bb0
  ldr r2, =_sbss
 8000384:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000388:	20000094 	.word	0x20000094

0800038c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC_IRQHandler>
	...

08000390 <GPIO_Init>:

// ********** GPIO APIs function definition **********

// *** GPIO Initialization and Control ***
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) //Initialize GPIO Port and Pin
{
 8000390:	b480      	push	{r7}
 8000392:	b087      	sub	sp, #28
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	pRCC_RegDef();
 8000398:	4b53      	ldr	r3, [pc, #332]	; (80004e8 <GPIO_Init+0x158>)
 800039a:	617b      	str	r3, [r7, #20]

	uint32_t Temp = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	613b      	str	r3, [r7, #16]

	//Configure MODE
	if(pGPIOHandle->GPIO_PinConfig.PinMode < 3) //Non interrupt mode
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	795b      	ldrb	r3, [r3, #5]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d820      	bhi.n	80003ea <GPIO_Init+0x5a>
	{
		Temp = pGPIOHandle->GPIO_PinConfig.PinMode << (2* pGPIOHandle->GPIO_PinConfig.PinNumber);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	795b      	ldrb	r3, [r3, #5]
 80003ac:	461a      	mov	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	791b      	ldrb	r3, [r3, #4]
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	fa02 f303 	lsl.w	r3, r2, r3
 80003b8:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOBaseAddr->MODER &= ~(0x11 << 2* pGPIOHandle->GPIO_PinConfig.PinNumber);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	791b      	ldrb	r3, [r3, #4]
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	2111      	movs	r1, #17
 80003c8:	fa01 f303 	lsl.w	r3, r1, r3
 80003cc:	43db      	mvns	r3, r3
 80003ce:	4619      	mov	r1, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	400a      	ands	r2, r1
 80003d6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOBaseAddr->MODER |= Temp;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	6819      	ldr	r1, [r3, #0]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	693a      	ldr	r2, [r7, #16]
 80003e4:	430a      	orrs	r2, r1
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	e0a9      	b.n	800053e <GPIO_Init+0x1ae>
	}
	else
	{
		//Configure interrupt trigger (Rising and/or falling edge)
		if(pGPIOHandle->GPIO_PinConfig.PinMode == GPIO_MODE_IT_FT)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	795b      	ldrb	r3, [r3, #5]
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d117      	bne.n	8000422 <GPIO_Init+0x92>
		{
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 80003f2:	4b3e      	ldr	r3, [pc, #248]	; (80004ec <GPIO_Init+0x15c>)
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	7912      	ldrb	r2, [r2, #4]
 80003fa:	4611      	mov	r1, r2
 80003fc:	2201      	movs	r2, #1
 80003fe:	408a      	lsls	r2, r1
 8000400:	43d2      	mvns	r2, r2
 8000402:	4611      	mov	r1, r2
 8000404:	4a39      	ldr	r2, [pc, #228]	; (80004ec <GPIO_Init+0x15c>)
 8000406:	400b      	ands	r3, r1
 8000408:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 800040a:	4b38      	ldr	r3, [pc, #224]	; (80004ec <GPIO_Init+0x15c>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	7912      	ldrb	r2, [r2, #4]
 8000412:	4611      	mov	r1, r2
 8000414:	2201      	movs	r2, #1
 8000416:	408a      	lsls	r2, r1
 8000418:	4611      	mov	r1, r2
 800041a:	4a34      	ldr	r2, [pc, #208]	; (80004ec <GPIO_Init+0x15c>)
 800041c:	430b      	orrs	r3, r1
 800041e:	6093      	str	r3, [r2, #8]
 8000420:	e035      	b.n	800048e <GPIO_Init+0xfe>
		}
		else if(pGPIOHandle->GPIO_PinConfig.PinMode == GPIO_MODE_IT_RT)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	795b      	ldrb	r3, [r3, #5]
 8000426:	2b05      	cmp	r3, #5
 8000428:	d117      	bne.n	800045a <GPIO_Init+0xca>
		{
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 800042a:	4b30      	ldr	r3, [pc, #192]	; (80004ec <GPIO_Init+0x15c>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	7912      	ldrb	r2, [r2, #4]
 8000432:	4611      	mov	r1, r2
 8000434:	2201      	movs	r2, #1
 8000436:	408a      	lsls	r2, r1
 8000438:	4611      	mov	r1, r2
 800043a:	4a2c      	ldr	r2, [pc, #176]	; (80004ec <GPIO_Init+0x15c>)
 800043c:	430b      	orrs	r3, r1
 800043e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000440:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <GPIO_Init+0x15c>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	7912      	ldrb	r2, [r2, #4]
 8000448:	4611      	mov	r1, r2
 800044a:	2201      	movs	r2, #1
 800044c:	408a      	lsls	r2, r1
 800044e:	43d2      	mvns	r2, r2
 8000450:	4611      	mov	r1, r2
 8000452:	4a26      	ldr	r2, [pc, #152]	; (80004ec <GPIO_Init+0x15c>)
 8000454:	400b      	ands	r3, r1
 8000456:	6093      	str	r3, [r2, #8]
 8000458:	e019      	b.n	800048e <GPIO_Init+0xfe>
		}
		else if(pGPIOHandle->GPIO_PinConfig.PinMode == GPIO_MODE_IT_RFT)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	795b      	ldrb	r3, [r3, #5]
 800045e:	2b06      	cmp	r3, #6
 8000460:	d115      	bne.n	800048e <GPIO_Init+0xfe>
		{
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000462:	4b22      	ldr	r3, [pc, #136]	; (80004ec <GPIO_Init+0x15c>)
 8000464:	68db      	ldr	r3, [r3, #12]
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	7912      	ldrb	r2, [r2, #4]
 800046a:	4611      	mov	r1, r2
 800046c:	2201      	movs	r2, #1
 800046e:	408a      	lsls	r2, r1
 8000470:	4611      	mov	r1, r2
 8000472:	4a1e      	ldr	r2, [pc, #120]	; (80004ec <GPIO_Init+0x15c>)
 8000474:	430b      	orrs	r3, r1
 8000476:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <GPIO_Init+0x15c>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	7912      	ldrb	r2, [r2, #4]
 8000480:	4611      	mov	r1, r2
 8000482:	2201      	movs	r2, #1
 8000484:	408a      	lsls	r2, r1
 8000486:	4611      	mov	r1, r2
 8000488:	4a18      	ldr	r2, [pc, #96]	; (80004ec <GPIO_Init+0x15c>)
 800048a:	430b      	orrs	r3, r1
 800048c:	6093      	str	r3, [r2, #8]
		}

		//Configure the GPIO Port selected in the EXTI line
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.PinNumber / 4;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	089b      	lsrs	r3, r3, #2
 8000494:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.PinNumber % 4;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	791b      	ldrb	r3, [r3, #4]
 800049a:	f003 0303 	and.w	r3, r3, #3
 800049e:	73bb      	strb	r3, [r7, #14]
		uint8_t portcode = GPIO_BASE_ADDRESS_TO_CODE(pGPIOHandle->pGPIOBaseAddr);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <GPIO_Init+0x160>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d02c      	beq.n	8000504 <GPIO_Init+0x174>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <GPIO_Init+0x164>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d016      	beq.n	80004e2 <GPIO_Init+0x152>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <GPIO_Init+0x168>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d00f      	beq.n	80004de <GPIO_Init+0x14e>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <GPIO_Init+0x16c>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d008      	beq.n	80004da <GPIO_Init+0x14a>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <GPIO_Init+0x170>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d101      	bne.n	80004d6 <GPIO_Init+0x146>
 80004d2:	2305      	movs	r3, #5
 80004d4:	e017      	b.n	8000506 <GPIO_Init+0x176>
 80004d6:	2300      	movs	r3, #0
 80004d8:	e015      	b.n	8000506 <GPIO_Init+0x176>
 80004da:	2304      	movs	r3, #4
 80004dc:	e013      	b.n	8000506 <GPIO_Init+0x176>
 80004de:	2303      	movs	r3, #3
 80004e0:	e011      	b.n	8000506 <GPIO_Init+0x176>
 80004e2:	2302      	movs	r3, #2
 80004e4:	e00f      	b.n	8000506 <GPIO_Init+0x176>
 80004e6:	bf00      	nop
 80004e8:	40023800 	.word	0x40023800
 80004ec:	40013c00 	.word	0x40013c00
 80004f0:	40020400 	.word	0x40020400
 80004f4:	40020800 	.word	0x40020800
 80004f8:	40020c00 	.word	0x40020c00
 80004fc:	40021000 	.word	0x40021000
 8000500:	40021400 	.word	0x40021400
 8000504:	2300      	movs	r3, #0
 8000506:	737b      	strb	r3, [r7, #13]

		SYSCFG_CLK_EN();
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800050c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	645a      	str	r2, [r3, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode <<temp2*4;
 8000514:	7b7a      	ldrb	r2, [r7, #13]
 8000516:	7bbb      	ldrb	r3, [r7, #14]
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	fa02 f103 	lsl.w	r1, r2, r3
 800051e:	4a63      	ldr	r2, [pc, #396]	; (80006ac <GPIO_Init+0x31c>)
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	3302      	adds	r3, #2
 8000524:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//Enable EXTI interrupt delivery by IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.PinNumber;
 8000528:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <GPIO_Init+0x320>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	7912      	ldrb	r2, [r2, #4]
 8000530:	4611      	mov	r1, r2
 8000532:	2201      	movs	r2, #1
 8000534:	408a      	lsls	r2, r1
 8000536:	4611      	mov	r1, r2
 8000538:	4a5d      	ldr	r2, [pc, #372]	; (80006b0 <GPIO_Init+0x320>)
 800053a:	430b      	orrs	r3, r1
 800053c:	6013      	str	r3, [r2, #0]
	}


	//Configure SPEED
	Temp = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
	Temp = pGPIOHandle->GPIO_PinConfig.PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	799b      	ldrb	r3, [r3, #6]
 8000546:	461a      	mov	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	791b      	ldrb	r3, [r3, #4]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOBaseAddr->OSPEEDR &= ~ (0x11 << 2* pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	689a      	ldr	r2, [r3, #8]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	2111      	movs	r1, #17
 8000562:	fa01 f303 	lsl.w	r3, r1, r3
 8000566:	43db      	mvns	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	400a      	ands	r2, r1
 8000570:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOBaseAddr->OSPEEDR |= Temp;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6899      	ldr	r1, [r3, #8]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	430a      	orrs	r2, r1
 8000580:	609a      	str	r2, [r3, #8]

	//Configure PUPD
	Temp = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
	Temp = pGPIOHandle->GPIO_PinConfig.PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	79db      	ldrb	r3, [r3, #7]
 800058a:	461a      	mov	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOBaseAddr->PUPDR &= ~(0x11 << 2* pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	68da      	ldr	r2, [r3, #12]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	2111      	movs	r1, #17
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	43db      	mvns	r3, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	400a      	ands	r2, r1
 80005b4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOBaseAddr->PUPDR |= Temp;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68d9      	ldr	r1, [r3, #12]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	430a      	orrs	r2, r1
 80005c4:	60da      	str	r2, [r3, #12]

	//Configure POutput Type
	Temp = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
	Temp = pGPIOHandle->GPIO_PinConfig.PinOPType << (1* pGPIOHandle->GPIO_PinConfig.PinNumber);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	461a      	mov	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOBaseAddr->OTYPER &= ~(0x1 << 1* pGPIOHandle->GPIO_PinConfig.PinNumber);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	4619      	mov	r1, r3
 80005e6:	2301      	movs	r3, #1
 80005e8:	408b      	lsls	r3, r1
 80005ea:	43db      	mvns	r3, r3
 80005ec:	4619      	mov	r1, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	400a      	ands	r2, r1
 80005f4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOBaseAddr->OTYPER |= Temp;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6859      	ldr	r1, [r3, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	430a      	orrs	r2, r1
 8000604:	605a      	str	r2, [r3, #4]

	//Configure Pin Alt. Function
	if(pGPIOHandle->GPIO_PinConfig.PinAltFunMode == GPIO_MODE_AF)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	7a5b      	ldrb	r3, [r3, #9]
 800060a:	2b02      	cmp	r3, #2
 800060c:	d148      	bne.n	80006a0 <GPIO_Init+0x310>
	{
		if(pGPIOHandle->GPIO_PinConfig.PinNumber > 7) //High register
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	2b07      	cmp	r3, #7
 8000614:	d923      	bls.n	800065e <GPIO_Init+0x2ce>
		{
			 Temp = pGPIOHandle->GPIO_PinConfig.PinAltFunMode<< (4*(pGPIOHandle->GPIO_PinConfig.PinNumber-8));
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	7a5b      	ldrb	r3, [r3, #9]
 800061a:	461a      	mov	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	3b08      	subs	r3, #8
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	613b      	str	r3, [r7, #16]
			 pGPIOHandle->pGPIOBaseAddr->AFR[1] &= ~(0x1111 << (4*(pGPIOHandle->GPIO_PinConfig.PinNumber-8)));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	3b08      	subs	r3, #8
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	f241 1111 	movw	r1, #4369	; 0x1111
 800063c:	fa01 f303 	lsl.w	r3, r1, r3
 8000640:	43db      	mvns	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	400a      	ands	r2, r1
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
			 pGPIOHandle->pGPIOBaseAddr->AFR[1] |= Temp;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	430a      	orrs	r2, r1
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
			 pGPIOHandle->pGPIOBaseAddr->AFR[0] &= ~(0x1111 << (4*pGPIOHandle->GPIO_PinConfig.PinNumber));
			pGPIOHandle->pGPIOBaseAddr->AFR[0] |= Temp;
		}
	}

}
 800065c:	e020      	b.n	80006a0 <GPIO_Init+0x310>
			Temp = pGPIOHandle->GPIO_PinConfig.PinAltFunMode<< (4*pGPIOHandle->GPIO_PinConfig.PinNumber);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7a5b      	ldrb	r3, [r3, #9]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	613b      	str	r3, [r7, #16]
			 pGPIOHandle->pGPIOBaseAddr->AFR[0] &= ~(0x1111 << (4*pGPIOHandle->GPIO_PinConfig.PinNumber));
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	f241 1111 	movw	r1, #4369	; 0x1111
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	43db      	mvns	r3, r3
 8000686:	4619      	mov	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	400a      	ands	r2, r1
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOBaseAddr->AFR[0] |= Temp;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	430a      	orrs	r2, r1
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006a0:	bf00      	nop
 80006a2:	371c      	adds	r7, #28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	40013800 	.word	0x40013800
 80006b0:	40013c00 	.word	0x40013c00

080006b4 <GPIO_PeriClockControl>:
	if(pGPIO == (GPIO_RegDef_t*) GPIOD_BASE_ADDRESS)	GPIOD_REG_RESET();
	if(pGPIO == (GPIO_RegDef_t*) GPIOE_BASE_ADDRESS)	GPIOE_REG_RESET();
}

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t Enable) //Enable / Disable GPIO clock
{
 80006b4:	b480      	push	{r7}
 80006b6:	b08b      	sub	sp, #44	; 0x2c
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
	pRCC_RegDef();
 80006c0:	4b47      	ldr	r3, [pc, #284]	; (80007e0 <GPIO_PeriClockControl+0x12c>)
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
	if(Enable == ENABLE)
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d148      	bne.n	800075c <GPIO_PeriClockControl+0xa8>
	{

		if(pGPIOx == (GPIO_RegDef_t*)GPIOA_BASE_ADDRESS)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a45      	ldr	r2, [pc, #276]	; (80007e4 <GPIO_PeriClockControl+0x130>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d107      	bne.n	80006e2 <GPIO_PeriClockControl+0x2e>
		{
			pGPIOA_RegDef();
 80006d2:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <GPIO_PeriClockControl+0x130>)
 80006d4:	623b      	str	r3, [r7, #32]
			GPIOA_PCLK_EN();
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f043 0201 	orr.w	r2, r3, #1
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
		}
		if(pGPIOx == (GPIO_RegDef_t*)GPIOB_BASE_ADDRESS)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a3f      	ldr	r2, [pc, #252]	; (80007e4 <GPIO_PeriClockControl+0x130>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d107      	bne.n	80006fa <GPIO_PeriClockControl+0x46>
		{
			pGPIOB_RegDef();
 80006ea:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <GPIO_PeriClockControl+0x130>)
 80006ec:	61fb      	str	r3, [r7, #28]
			GPIOB_PCLK_EN();
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
		}
		if(pGPIOx == (GPIO_RegDef_t*)GPIOC_BASE_ADDRESS)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a3a      	ldr	r2, [pc, #232]	; (80007e8 <GPIO_PeriClockControl+0x134>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d107      	bne.n	8000712 <GPIO_PeriClockControl+0x5e>
		{
			pGPIOC_RegDef();
 8000702:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <GPIO_PeriClockControl+0x134>)
 8000704:	61bb      	str	r3, [r7, #24]
			GPIOC_PCLK_EN();
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f043 0204 	orr.w	r2, r3, #4
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
		}
		if(pGPIOx == (GPIO_RegDef_t*)GPIOD_BASE_ADDRESS)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a35      	ldr	r2, [pc, #212]	; (80007ec <GPIO_PeriClockControl+0x138>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d107      	bne.n	800072a <GPIO_PeriClockControl+0x76>
		{
			pGPIOD_RegDef();
 800071a:	4b34      	ldr	r3, [pc, #208]	; (80007ec <GPIO_PeriClockControl+0x138>)
 800071c:	617b      	str	r3, [r7, #20]
			GPIOD_PCLK_EN();
 800071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f043 0208 	orr.w	r2, r3, #8
 8000726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
		}
		if(pGPIOx == (GPIO_RegDef_t*)GPIOE_BASE_ADDRESS)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a30      	ldr	r2, [pc, #192]	; (80007f0 <GPIO_PeriClockControl+0x13c>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d107      	bne.n	8000742 <GPIO_PeriClockControl+0x8e>
		{
			pGPIOE_RegDef();
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <GPIO_PeriClockControl+0x13c>)
 8000734:	613b      	str	r3, [r7, #16]
			GPIOE_PCLK_EN();
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f043 0210 	orr.w	r2, r3, #16
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	631a      	str	r2, [r3, #48]	; 0x30
		}
		if(pGPIOx == (GPIO_RegDef_t*)GPIOF_BASE_ADDRESS)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a2b      	ldr	r2, [pc, #172]	; (80007f4 <GPIO_PeriClockControl+0x140>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d144      	bne.n	80007d4 <GPIO_PeriClockControl+0x120>
		{
			pGPIOF_RegDef();
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <GPIO_PeriClockControl+0x140>)
 800074c:	60fb      	str	r3, [r7, #12]
			GPIOF_PCLK_EN();
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f043 0220 	orr.w	r2, r3, #32
 8000756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == (GPIO_RegDef_t*) GPIOC_BASE_ADDRESS)	GPIOC_PCLK_DI();
		if(pGPIOx == (GPIO_RegDef_t*) GPIOD_BASE_ADDRESS)	GPIOD_PCLK_DI();
		if(pGPIOx == (GPIO_RegDef_t*) GPIOE_BASE_ADDRESS)	GPIOE_PCLK_DI();
		if(pGPIOx == (GPIO_RegDef_t*) GPIOF_BASE_ADDRESS)	GPIOF_PCLK_DI();
	}
}
 800075a:	e03b      	b.n	80007d4 <GPIO_PeriClockControl+0x120>
		if(pGPIOx == (GPIO_RegDef_t*) GPIOA_BASE_ADDRESS)	GPIOA_PCLK_DI();
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <GPIO_PeriClockControl+0x130>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d105      	bne.n	8000770 <GPIO_PeriClockControl+0xbc>
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	f023 0201 	bic.w	r2, r3, #1
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == (GPIO_RegDef_t*) GPIOB_BASE_ADDRESS)	GPIOB_PCLK_DI();
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <GPIO_PeriClockControl+0x130>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d105      	bne.n	8000784 <GPIO_PeriClockControl+0xd0>
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	f023 0202 	bic.w	r2, r3, #2
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == (GPIO_RegDef_t*) GPIOC_BASE_ADDRESS)	GPIOC_PCLK_DI();
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <GPIO_PeriClockControl+0x134>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d105      	bne.n	8000798 <GPIO_PeriClockControl+0xe4>
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	f023 0204 	bic.w	r2, r3, #4
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == (GPIO_RegDef_t*) GPIOD_BASE_ADDRESS)	GPIOD_PCLK_DI();
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <GPIO_PeriClockControl+0x138>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d105      	bne.n	80007ac <GPIO_PeriClockControl+0xf8>
 80007a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	f023 0208 	bic.w	r2, r3, #8
 80007a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007aa:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == (GPIO_RegDef_t*) GPIOE_BASE_ADDRESS)	GPIOE_PCLK_DI();
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <GPIO_PeriClockControl+0x13c>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d105      	bne.n	80007c0 <GPIO_PeriClockControl+0x10c>
 80007b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	f023 0210 	bic.w	r2, r3, #16
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	631a      	str	r2, [r3, #48]	; 0x30
		if(pGPIOx == (GPIO_RegDef_t*) GPIOF_BASE_ADDRESS)	GPIOF_PCLK_DI();
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <GPIO_PeriClockControl+0x140>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d105      	bne.n	80007d4 <GPIO_PeriClockControl+0x120>
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	f023 0220 	bic.w	r2, r3, #32
 80007d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80007d4:	bf00      	nop
 80007d6:	372c      	adds	r7, #44	; 0x2c
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40021400 	.word	0x40021400

080007f8 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = (uint16_t) Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<PinNumber);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	78fa      	ldrb	r2, [r7, #3]
 800080a:	2101      	movs	r1, #1
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	405a      	eors	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	615a      	str	r2, [r3, #20]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <GPIO_IRQConfig>:

// *** GPIO Interrupt Config and Handling ***
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t Enable)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	460b      	mov	r3, r1
 8000830:	71bb      	strb	r3, [r7, #6]
 8000832:	4613      	mov	r3, r2
 8000834:	717b      	strb	r3, [r7, #5]
	//Set or Reset IRQ Number
	if(Enable == ENABLE)
 8000836:	797b      	ldrb	r3, [r7, #5]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d133      	bne.n	80008a4 <GPIO_IRQConfig+0x80>
		{
			if(IRQNumber <= 31)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b1f      	cmp	r3, #31
 8000840:	d80a      	bhi.n	8000858 <GPIO_IRQConfig+0x34>
			{
				//program ISER0 register
				*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000842:	4b43      	ldr	r3, [pc, #268]	; (8000950 <GPIO_IRQConfig+0x12c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	2101      	movs	r1, #1
 800084a:	fa01 f202 	lsl.w	r2, r1, r2
 800084e:	4611      	mov	r1, r2
 8000850:	4a3f      	ldr	r2, [pc, #252]	; (8000950 <GPIO_IRQConfig+0x12c>)
 8000852:	430b      	orrs	r3, r1
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	e058      	b.n	800090a <GPIO_IRQConfig+0xe6>

			}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b1f      	cmp	r3, #31
 800085c:	d90f      	bls.n	800087e <GPIO_IRQConfig+0x5a>
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b3f      	cmp	r3, #63	; 0x3f
 8000862:	d80c      	bhi.n	800087e <GPIO_IRQConfig+0x5a>
			{
				//program ISER1 register
				*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000864:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <GPIO_IRQConfig+0x130>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	79fa      	ldrb	r2, [r7, #7]
 800086a:	f002 021f 	and.w	r2, r2, #31
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	4611      	mov	r1, r2
 8000876:	4a37      	ldr	r2, [pc, #220]	; (8000954 <GPIO_IRQConfig+0x130>)
 8000878:	430b      	orrs	r3, r1
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	e045      	b.n	800090a <GPIO_IRQConfig+0xe6>
			}
			else if(IRQNumber >= 64 && IRQNumber < 96 )
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b3f      	cmp	r3, #63	; 0x3f
 8000882:	d942      	bls.n	800090a <GPIO_IRQConfig+0xe6>
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b5f      	cmp	r3, #95	; 0x5f
 8000888:	d83f      	bhi.n	800090a <GPIO_IRQConfig+0xe6>
			{
				//program ISER2 register //64 to 95
				*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <GPIO_IRQConfig+0x134>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000894:	2101      	movs	r1, #1
 8000896:	fa01 f202 	lsl.w	r2, r1, r2
 800089a:	4611      	mov	r1, r2
 800089c:	4a2e      	ldr	r2, [pc, #184]	; (8000958 <GPIO_IRQConfig+0x134>)
 800089e:	430b      	orrs	r3, r1
 80008a0:	6013      	str	r3, [r2, #0]
 80008a2:	e032      	b.n	800090a <GPIO_IRQConfig+0xe6>
			}
		}
	else
		{
			if(IRQNumber <= 31)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b1f      	cmp	r3, #31
 80008a8:	d80a      	bhi.n	80008c0 <GPIO_IRQConfig+0x9c>
			{
				//program ICER0 register
				*NVIC_ICER0 |= ( 1 << IRQNumber );
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <GPIO_IRQConfig+0x138>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	79fa      	ldrb	r2, [r7, #7]
 80008b0:	2101      	movs	r1, #1
 80008b2:	fa01 f202 	lsl.w	r2, r1, r2
 80008b6:	4611      	mov	r1, r2
 80008b8:	4a28      	ldr	r2, [pc, #160]	; (800095c <GPIO_IRQConfig+0x138>)
 80008ba:	430b      	orrs	r3, r1
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	e024      	b.n	800090a <GPIO_IRQConfig+0xe6>
			}else if(IRQNumber > 31 && IRQNumber < 64 )
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b1f      	cmp	r3, #31
 80008c4:	d90f      	bls.n	80008e6 <GPIO_IRQConfig+0xc2>
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b3f      	cmp	r3, #63	; 0x3f
 80008ca:	d80c      	bhi.n	80008e6 <GPIO_IRQConfig+0xc2>
			{
				//program ICER1 register
				*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 80008cc:	4b24      	ldr	r3, [pc, #144]	; (8000960 <GPIO_IRQConfig+0x13c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	f002 021f 	and.w	r2, r2, #31
 80008d6:	2101      	movs	r1, #1
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a20      	ldr	r2, [pc, #128]	; (8000960 <GPIO_IRQConfig+0x13c>)
 80008e0:	430b      	orrs	r3, r1
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	e011      	b.n	800090a <GPIO_IRQConfig+0xe6>
			}
			else if(IRQNumber >= 64 && IRQNumber < 96 )
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b3f      	cmp	r3, #63	; 0x3f
 80008ea:	d90e      	bls.n	800090a <GPIO_IRQConfig+0xe6>
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b5f      	cmp	r3, #95	; 0x5f
 80008f0:	d80b      	bhi.n	800090a <GPIO_IRQConfig+0xe6>
			{
				//program ICER2 register
				*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <GPIO_IRQConfig+0x140>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	79fa      	ldrb	r2, [r7, #7]
 80008f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008fc:	2101      	movs	r1, #1
 80008fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000902:	4611      	mov	r1, r2
 8000904:	4a17      	ldr	r2, [pc, #92]	; (8000964 <GPIO_IRQConfig+0x140>)
 8000906:	430b      	orrs	r3, r1
 8000908:	6013      	str	r3, [r2, #0]
			}
		}

	//Set or Reset IRQ Priority

	uint8_t iprx = IRQNumber / 4;
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	089b      	lsrs	r3, r3, #2
 800090e:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber % 4 ;
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NVIC_NO_PR_BITS_IMPLEMENTED) ;
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	b2db      	uxtb	r3, r3
 800091e:	3304      	adds	r3, #4
 8000920:	737b      	strb	r3, [r7, #13]

	*(  NVIC_PR_BASE_ADDRESS + iprx ) |=  ( IRQPriority << shift_amount );
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	f503 2364 	add.w	r3, r3, #933888	; 0xe4000
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	79b9      	ldrb	r1, [r7, #6]
 800092e:	7b7b      	ldrb	r3, [r7, #13]
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	4619      	mov	r1, r3
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	f503 2364 	add.w	r3, r3, #933888	; 0xe4000
 800093e:	430a      	orrs	r2, r1
 8000940:	601a      	str	r2, [r3, #0]

}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000e104 	.word	0xe000e104
 8000958:	e000e108 	.word	0xe000e108
 800095c:	e000e180 	.word	0xe000e180
 8000960:	e000e184 	.word	0xe000e184
 8000964:	e000e188 	.word	0xe000e188

08000968 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	// Clear pending register for corresponding Pin Number
	if(EXTI->PR & (1 << PinNumber))
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <GPIO_IRQHandling+0x3c>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	2101      	movs	r1, #1
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	4013      	ands	r3, r2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d009      	beq.n	8000998 <GPIO_IRQHandling+0x30>
	{
		EXTI->PR |= (1 << PinNumber); //Clear
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <GPIO_IRQHandling+0x3c>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	79fa      	ldrb	r2, [r7, #7]
 800098a:	2101      	movs	r1, #1
 800098c:	fa01 f202 	lsl.w	r2, r1, r2
 8000990:	4611      	mov	r1, r2
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <GPIO_IRQHandling+0x3c>)
 8000994:	430b      	orrs	r3, r1
 8000996:	6153      	str	r3, [r2, #20]
	}
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	40013c00 	.word	0x40013c00

080009a8 <__errno>:
 80009a8:	4b01      	ldr	r3, [pc, #4]	; (80009b0 <__errno+0x8>)
 80009aa:	6818      	ldr	r0, [r3, #0]
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000000 	.word	0x20000000

080009b4 <__libc_init_array>:
 80009b4:	b570      	push	{r4, r5, r6, lr}
 80009b6:	4e0d      	ldr	r6, [pc, #52]	; (80009ec <__libc_init_array+0x38>)
 80009b8:	4c0d      	ldr	r4, [pc, #52]	; (80009f0 <__libc_init_array+0x3c>)
 80009ba:	1ba4      	subs	r4, r4, r6
 80009bc:	10a4      	asrs	r4, r4, #2
 80009be:	2500      	movs	r5, #0
 80009c0:	42a5      	cmp	r5, r4
 80009c2:	d109      	bne.n	80009d8 <__libc_init_array+0x24>
 80009c4:	4e0b      	ldr	r6, [pc, #44]	; (80009f4 <__libc_init_array+0x40>)
 80009c6:	4c0c      	ldr	r4, [pc, #48]	; (80009f8 <__libc_init_array+0x44>)
 80009c8:	f000 f8e2 	bl	8000b90 <_init>
 80009cc:	1ba4      	subs	r4, r4, r6
 80009ce:	10a4      	asrs	r4, r4, #2
 80009d0:	2500      	movs	r5, #0
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	d105      	bne.n	80009e2 <__libc_init_array+0x2e>
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009dc:	4798      	blx	r3
 80009de:	3501      	adds	r5, #1
 80009e0:	e7ee      	b.n	80009c0 <__libc_init_array+0xc>
 80009e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009e6:	4798      	blx	r3
 80009e8:	3501      	adds	r5, #1
 80009ea:	e7f2      	b.n	80009d2 <__libc_init_array+0x1e>
 80009ec:	08000ba8 	.word	0x08000ba8
 80009f0:	08000ba8 	.word	0x08000ba8
 80009f4:	08000ba8 	.word	0x08000ba8
 80009f8:	08000bac 	.word	0x08000bac

080009fc <malloc>:
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <malloc+0xc>)
 80009fe:	4601      	mov	r1, r0
 8000a00:	6818      	ldr	r0, [r3, #0]
 8000a02:	f000 b859 	b.w	8000ab8 <_malloc_r>
 8000a06:	bf00      	nop
 8000a08:	20000000 	.word	0x20000000

08000a0c <free>:
 8000a0c:	4b02      	ldr	r3, [pc, #8]	; (8000a18 <free+0xc>)
 8000a0e:	4601      	mov	r1, r0
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	f000 b803 	b.w	8000a1c <_free_r>
 8000a16:	bf00      	nop
 8000a18:	20000000 	.word	0x20000000

08000a1c <_free_r>:
 8000a1c:	b538      	push	{r3, r4, r5, lr}
 8000a1e:	4605      	mov	r5, r0
 8000a20:	2900      	cmp	r1, #0
 8000a22:	d045      	beq.n	8000ab0 <_free_r+0x94>
 8000a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a28:	1f0c      	subs	r4, r1, #4
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bfb8      	it	lt
 8000a2e:	18e4      	addlt	r4, r4, r3
 8000a30:	f000 f8ac 	bl	8000b8c <__malloc_lock>
 8000a34:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <_free_r+0x98>)
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	4610      	mov	r0, r2
 8000a3a:	b933      	cbnz	r3, 8000a4a <_free_r+0x2e>
 8000a3c:	6063      	str	r3, [r4, #4]
 8000a3e:	6014      	str	r4, [r2, #0]
 8000a40:	4628      	mov	r0, r5
 8000a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a46:	f000 b8a2 	b.w	8000b8e <__malloc_unlock>
 8000a4a:	42a3      	cmp	r3, r4
 8000a4c:	d90c      	bls.n	8000a68 <_free_r+0x4c>
 8000a4e:	6821      	ldr	r1, [r4, #0]
 8000a50:	1862      	adds	r2, r4, r1
 8000a52:	4293      	cmp	r3, r2
 8000a54:	bf04      	itt	eq
 8000a56:	681a      	ldreq	r2, [r3, #0]
 8000a58:	685b      	ldreq	r3, [r3, #4]
 8000a5a:	6063      	str	r3, [r4, #4]
 8000a5c:	bf04      	itt	eq
 8000a5e:	1852      	addeq	r2, r2, r1
 8000a60:	6022      	streq	r2, [r4, #0]
 8000a62:	6004      	str	r4, [r0, #0]
 8000a64:	e7ec      	b.n	8000a40 <_free_r+0x24>
 8000a66:	4613      	mov	r3, r2
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	b10a      	cbz	r2, 8000a70 <_free_r+0x54>
 8000a6c:	42a2      	cmp	r2, r4
 8000a6e:	d9fa      	bls.n	8000a66 <_free_r+0x4a>
 8000a70:	6819      	ldr	r1, [r3, #0]
 8000a72:	1858      	adds	r0, r3, r1
 8000a74:	42a0      	cmp	r0, r4
 8000a76:	d10b      	bne.n	8000a90 <_free_r+0x74>
 8000a78:	6820      	ldr	r0, [r4, #0]
 8000a7a:	4401      	add	r1, r0
 8000a7c:	1858      	adds	r0, r3, r1
 8000a7e:	4282      	cmp	r2, r0
 8000a80:	6019      	str	r1, [r3, #0]
 8000a82:	d1dd      	bne.n	8000a40 <_free_r+0x24>
 8000a84:	6810      	ldr	r0, [r2, #0]
 8000a86:	6852      	ldr	r2, [r2, #4]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	4401      	add	r1, r0
 8000a8c:	6019      	str	r1, [r3, #0]
 8000a8e:	e7d7      	b.n	8000a40 <_free_r+0x24>
 8000a90:	d902      	bls.n	8000a98 <_free_r+0x7c>
 8000a92:	230c      	movs	r3, #12
 8000a94:	602b      	str	r3, [r5, #0]
 8000a96:	e7d3      	b.n	8000a40 <_free_r+0x24>
 8000a98:	6820      	ldr	r0, [r4, #0]
 8000a9a:	1821      	adds	r1, r4, r0
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	bf04      	itt	eq
 8000aa0:	6811      	ldreq	r1, [r2, #0]
 8000aa2:	6852      	ldreq	r2, [r2, #4]
 8000aa4:	6062      	str	r2, [r4, #4]
 8000aa6:	bf04      	itt	eq
 8000aa8:	1809      	addeq	r1, r1, r0
 8000aaa:	6021      	streq	r1, [r4, #0]
 8000aac:	605c      	str	r4, [r3, #4]
 8000aae:	e7c7      	b.n	8000a40 <_free_r+0x24>
 8000ab0:	bd38      	pop	{r3, r4, r5, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000088 	.word	0x20000088

08000ab8 <_malloc_r>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	1ccd      	adds	r5, r1, #3
 8000abc:	f025 0503 	bic.w	r5, r5, #3
 8000ac0:	3508      	adds	r5, #8
 8000ac2:	2d0c      	cmp	r5, #12
 8000ac4:	bf38      	it	cc
 8000ac6:	250c      	movcc	r5, #12
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	4606      	mov	r6, r0
 8000acc:	db01      	blt.n	8000ad2 <_malloc_r+0x1a>
 8000ace:	42a9      	cmp	r1, r5
 8000ad0:	d903      	bls.n	8000ada <_malloc_r+0x22>
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	6033      	str	r3, [r6, #0]
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	bd70      	pop	{r4, r5, r6, pc}
 8000ada:	f000 f857 	bl	8000b8c <__malloc_lock>
 8000ade:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <_malloc_r+0xac>)
 8000ae0:	6814      	ldr	r4, [r2, #0]
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	b991      	cbnz	r1, 8000b0c <_malloc_r+0x54>
 8000ae6:	4c20      	ldr	r4, [pc, #128]	; (8000b68 <_malloc_r+0xb0>)
 8000ae8:	6823      	ldr	r3, [r4, #0]
 8000aea:	b91b      	cbnz	r3, 8000af4 <_malloc_r+0x3c>
 8000aec:	4630      	mov	r0, r6
 8000aee:	f000 f83d 	bl	8000b6c <_sbrk_r>
 8000af2:	6020      	str	r0, [r4, #0]
 8000af4:	4629      	mov	r1, r5
 8000af6:	4630      	mov	r0, r6
 8000af8:	f000 f838 	bl	8000b6c <_sbrk_r>
 8000afc:	1c43      	adds	r3, r0, #1
 8000afe:	d124      	bne.n	8000b4a <_malloc_r+0x92>
 8000b00:	230c      	movs	r3, #12
 8000b02:	6033      	str	r3, [r6, #0]
 8000b04:	4630      	mov	r0, r6
 8000b06:	f000 f842 	bl	8000b8e <__malloc_unlock>
 8000b0a:	e7e4      	b.n	8000ad6 <_malloc_r+0x1e>
 8000b0c:	680b      	ldr	r3, [r1, #0]
 8000b0e:	1b5b      	subs	r3, r3, r5
 8000b10:	d418      	bmi.n	8000b44 <_malloc_r+0x8c>
 8000b12:	2b0b      	cmp	r3, #11
 8000b14:	d90f      	bls.n	8000b36 <_malloc_r+0x7e>
 8000b16:	600b      	str	r3, [r1, #0]
 8000b18:	50cd      	str	r5, [r1, r3]
 8000b1a:	18cc      	adds	r4, r1, r3
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	f000 f836 	bl	8000b8e <__malloc_unlock>
 8000b22:	f104 000b 	add.w	r0, r4, #11
 8000b26:	1d23      	adds	r3, r4, #4
 8000b28:	f020 0007 	bic.w	r0, r0, #7
 8000b2c:	1ac3      	subs	r3, r0, r3
 8000b2e:	d0d3      	beq.n	8000ad8 <_malloc_r+0x20>
 8000b30:	425a      	negs	r2, r3
 8000b32:	50e2      	str	r2, [r4, r3]
 8000b34:	e7d0      	b.n	8000ad8 <_malloc_r+0x20>
 8000b36:	428c      	cmp	r4, r1
 8000b38:	684b      	ldr	r3, [r1, #4]
 8000b3a:	bf16      	itet	ne
 8000b3c:	6063      	strne	r3, [r4, #4]
 8000b3e:	6013      	streq	r3, [r2, #0]
 8000b40:	460c      	movne	r4, r1
 8000b42:	e7eb      	b.n	8000b1c <_malloc_r+0x64>
 8000b44:	460c      	mov	r4, r1
 8000b46:	6849      	ldr	r1, [r1, #4]
 8000b48:	e7cc      	b.n	8000ae4 <_malloc_r+0x2c>
 8000b4a:	1cc4      	adds	r4, r0, #3
 8000b4c:	f024 0403 	bic.w	r4, r4, #3
 8000b50:	42a0      	cmp	r0, r4
 8000b52:	d005      	beq.n	8000b60 <_malloc_r+0xa8>
 8000b54:	1a21      	subs	r1, r4, r0
 8000b56:	4630      	mov	r0, r6
 8000b58:	f000 f808 	bl	8000b6c <_sbrk_r>
 8000b5c:	3001      	adds	r0, #1
 8000b5e:	d0cf      	beq.n	8000b00 <_malloc_r+0x48>
 8000b60:	6025      	str	r5, [r4, #0]
 8000b62:	e7db      	b.n	8000b1c <_malloc_r+0x64>
 8000b64:	20000088 	.word	0x20000088
 8000b68:	2000008c 	.word	0x2000008c

08000b6c <_sbrk_r>:
 8000b6c:	b538      	push	{r3, r4, r5, lr}
 8000b6e:	4c06      	ldr	r4, [pc, #24]	; (8000b88 <_sbrk_r+0x1c>)
 8000b70:	2300      	movs	r3, #0
 8000b72:	4605      	mov	r5, r0
 8000b74:	4608      	mov	r0, r1
 8000b76:	6023      	str	r3, [r4, #0]
 8000b78:	f7ff fbaa 	bl	80002d0 <_sbrk>
 8000b7c:	1c43      	adds	r3, r0, #1
 8000b7e:	d102      	bne.n	8000b86 <_sbrk_r+0x1a>
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	b103      	cbz	r3, 8000b86 <_sbrk_r+0x1a>
 8000b84:	602b      	str	r3, [r5, #0]
 8000b86:	bd38      	pop	{r3, r4, r5, pc}
 8000b88:	20000090 	.word	0x20000090

08000b8c <__malloc_lock>:
 8000b8c:	4770      	bx	lr

08000b8e <__malloc_unlock>:
 8000b8e:	4770      	bx	lr

08000b90 <_init>:
 8000b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b92:	bf00      	nop
 8000b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b96:	bc08      	pop	{r3}
 8000b98:	469e      	mov	lr, r3
 8000b9a:	4770      	bx	lr

08000b9c <_fini>:
 8000b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9e:	bf00      	nop
 8000ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ba2:	bc08      	pop	{r3}
 8000ba4:	469e      	mov	lr, r3
 8000ba6:	4770      	bx	lr
